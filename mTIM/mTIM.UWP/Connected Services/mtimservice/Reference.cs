//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 16.0.32413.511
// 
namespace mTIM.UWP.mtimservice {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
    public partial class FaultDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private mTIM.UWP.mtimservice.FailureReason ErrorCodeField;
        
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public mTIM.UWP.mtimservice.FailureReason ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailureReason", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
    public enum FailureReason : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALID_MOBILE_ID = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TEAM_INACTIVE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_TASKLIST_FOR_DAY = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALID_TASKLIST_ID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALID_DATE_STRING = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALID_GPS_STRING = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STRING_TOO_LONG = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TRANSIENT_ERROR_TRY_AGAIN_LATER = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VERSION_TOO_OLD = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INTERNAL_SERVER_ERROR = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NULL_PARAMETER = 10,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimTask", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v1_2.External")]
    public partial class TimTask : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ActionField;
        
        private string ColorField;
        
        private string EvaluationTypeField;
        
        private string ExternIdField;
        
        private System.Nullable<int> ForSubLevelField;
        
        private bool HasGPSField;
        
        private int IdField;
        
        private int LevelField;
        
        private string NameField;
        
        private System.Guid ObjectIdField;
        
        private System.Nullable<int> ParentField;
        
        private string PathField;
        
        private string RangeField;
        
        private bool ShowInListField;
        
        private System.Nullable<int> SortNrField;
        
        private bool SplitGraphicField;
        
        private string TypeField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EvaluationType {
            get {
                return this.EvaluationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EvaluationTypeField, value) != true)) {
                    this.EvaluationTypeField = value;
                    this.RaisePropertyChanged("EvaluationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternId {
            get {
                return this.ExternIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternIdField, value) != true)) {
                    this.ExternIdField = value;
                    this.RaisePropertyChanged("ExternId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ForSubLevel {
            get {
                return this.ForSubLevelField;
            }
            set {
                if ((this.ForSubLevelField.Equals(value) != true)) {
                    this.ForSubLevelField = value;
                    this.RaisePropertyChanged("ForSubLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasGPS {
            get {
                return this.HasGPSField;
            }
            set {
                if ((this.HasGPSField.Equals(value) != true)) {
                    this.HasGPSField = value;
                    this.RaisePropertyChanged("HasGPS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((this.ObjectIdField.Equals(value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((this.ParentField.Equals(value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Range {
            get {
                return this.RangeField;
            }
            set {
                if ((object.ReferenceEquals(this.RangeField, value) != true)) {
                    this.RangeField = value;
                    this.RaisePropertyChanged("Range");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowInList {
            get {
                return this.ShowInListField;
            }
            set {
                if ((this.ShowInListField.Equals(value) != true)) {
                    this.ShowInListField = value;
                    this.RaisePropertyChanged("ShowInList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SortNr {
            get {
                return this.SortNrField;
            }
            set {
                if ((this.SortNrField.Equals(value) != true)) {
                    this.SortNrField = value;
                    this.RaisePropertyChanged("SortNr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SplitGraphic {
            get {
                return this.SplitGraphicField;
            }
            set {
                if ((this.SplitGraphicField.Equals(value) != true)) {
                    this.SplitGraphicField = value;
                    this.RaisePropertyChanged("SplitGraphic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StateInformation", Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StateInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private mTIM.UWP.mtimservice.StatusConfiguration ConfigurationField;
        
        private mTIM.UWP.mtimservice.CurrentElementsState StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public mTIM.UWP.mtimservice.StatusConfiguration Configuration {
            get {
                return this.ConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationField, value) != true)) {
                    this.ConfigurationField = value;
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public mTIM.UWP.mtimservice.CurrentElementsState State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusConfiguration", Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StatusConfiguration : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<mTIM.UWP.mtimservice.StatusAction> ActionsField;
        
        private System.Collections.Generic.List<mTIM.UWP.mtimservice.StatusCondition> ConditionsField;
        
        private System.Collections.Generic.List<mTIM.UWP.mtimservice.Status> StatesField;
        
        private System.Guid TimestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<mTIM.UWP.mtimservice.StatusAction> Actions {
            get {
                return this.ActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionsField, value) != true)) {
                    this.ActionsField = value;
                    this.RaisePropertyChanged("Actions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<mTIM.UWP.mtimservice.StatusCondition> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<mTIM.UWP.mtimservice.Status> States {
            get {
                return this.StatesField;
            }
            set {
                if ((object.ReferenceEquals(this.StatesField, value) != true)) {
                    this.StatesField = value;
                    this.RaisePropertyChanged("States");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrentElementsState", Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class CurrentElementsState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<mTIM.UWP.mtimservice.ElementState> ElementsField;
        
        private System.Guid TimestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<mTIM.UWP.mtimservice.ElementState> Elements {
            get {
                return this.ElementsField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementsField, value) != true)) {
                    this.ElementsField = value;
                    this.RaisePropertyChanged("Elements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusAction", Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StatusAction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private System.Collections.Generic.List<string> NegativePreconditionsField;
        
        private System.Collections.Generic.List<string> PositivePreconditionsField;
        
        private System.Collections.Generic.List<string> ResetConditionsField;
        
        private System.Collections.Generic.List<string> SetConditionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> NegativePreconditions {
            get {
                return this.NegativePreconditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.NegativePreconditionsField, value) != true)) {
                    this.NegativePreconditionsField = value;
                    this.RaisePropertyChanged("NegativePreconditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> PositivePreconditions {
            get {
                return this.PositivePreconditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.PositivePreconditionsField, value) != true)) {
                    this.PositivePreconditionsField = value;
                    this.RaisePropertyChanged("PositivePreconditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> ResetConditions {
            get {
                return this.ResetConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResetConditionsField, value) != true)) {
                    this.ResetConditionsField = value;
                    this.RaisePropertyChanged("ResetConditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> SetConditions {
            get {
                return this.SetConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SetConditionsField, value) != true)) {
                    this.SetConditionsField = value;
                    this.RaisePropertyChanged("SetConditions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusCondition", Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StatusCondition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class Status : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColorField;
        
        private System.Collections.Generic.List<string> ConditionsField;
        
        private string NameField;
        
        private int SequenceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence {
            get {
                return this.SequenceField;
            }
            set {
                if ((this.SequenceField.Equals(value) != true)) {
                    this.SequenceField = value;
                    this.RaisePropertyChanged("Sequence");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElementState", Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class ElementState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<string> ConditionsField;
        
        private System.Guid ObjectIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectID {
            get {
                return this.ObjectIDField;
            }
            set {
                if ((this.ObjectIDField.Equals(value) != true)) {
                    this.ObjectIDField = value;
                    this.RaisePropertyChanged("ObjectID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskResult", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
    public partial class TaskResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string GpsField;
        
        private int PosIdField;
        
        private int TaskIdField;
        
        private string TimeField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gps {
            get {
                return this.GpsField;
            }
            set {
                if ((object.ReferenceEquals(this.GpsField, value) != true)) {
                    this.GpsField = value;
                    this.RaisePropertyChanged("Gps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PosId {
            get {
                return this.PosIdField;
            }
            set {
                if ((this.PosIdField.Equals(value) != true)) {
                    this.PosIdField = value;
                    this.RaisePropertyChanged("PosId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionUpdateInformation", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
    public partial class VersionUpdateInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string UrlField;
        
        private string VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileInformation", Namespace="http://schemas.datacontract.org/2004/07/mTim.ServiceContracts.v1_1.External")]
    public partial struct FileInformation : System.ComponentModel.INotifyPropertyChanged {
        
        private string CommentField;
        
        private int FileIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FileID {
            get {
                return this.FileIDField;
            }
            set {
                if ((this.FileIDField.Equals(value) != true)) {
                    this.FileIDField = value;
                    this.RaisePropertyChanged("FileID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TupleOfstringbase64Binary", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class TupleOfstringbase64Binary : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_Item1Field;
        
        private byte[] m_Item2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Item1 {
            get {
                return this.m_Item1Field;
            }
            set {
                if ((object.ReferenceEquals(this.m_Item1Field, value) != true)) {
                    this.m_Item1Field = value;
                    this.RaisePropertyChanged("m_Item1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] m_Item2 {
            get {
                return this.m_Item2Field;
            }
            set {
                if ((object.ReferenceEquals(this.m_Item2Field, value) != true)) {
                    this.m_Item2Field = value;
                    this.RaisePropertyChanged("m_Item2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="mtimservice.IMobileTim")]
    public interface IMobileTim {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetTaskListIdForDay", ReplyAction="http://tempuri.org/IMobileTim/GetTaskListIdForDayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetTaskListIdForDayFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<int> GetTaskListIdForDayAsync(string mobileId, string version, int year, int month, int day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetTaskList", ReplyAction="http://tempuri.org/IMobileTim/GetTaskListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetTaskListFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<mTIM.UWP.mtimservice.TimTask>> GetTaskListAsync(string mobileId, string version, int taskListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetTaskListAsCsv", ReplyAction="http://tempuri.org/IMobileTim/GetTaskListAsCsvResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetTaskListAsCsvFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<string> GetTaskListAsCsvAsync(string mobileId, string version, int taskListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetTaskListAsCsvGZipped", ReplyAction="http://tempuri.org/IMobileTim/GetTaskListAsCsvGZippedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetTaskListAsCsvGZippedFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<byte[]> GetTaskListAsCsvGZippedAsync(string mobileId, string version, int taskListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetGraphicsBlobProtobufGZipped", ReplyAction="http://tempuri.org/IMobileTim/GetGraphicsBlobProtobufGZippedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetGraphicsBlobProtobufGZippedFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<byte[]> GetGraphicsBlobProtobufGZippedAsync(string mobileId, string version, int taskListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetStatus", ReplyAction="http://tempuri.org/IMobileTim/GetStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetStatusFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<mTIM.UWP.mtimservice.StateInformation> GetStatusAsync(string mobileId, string version, int taskListId, System.Guid configurationTimestamp, System.Guid elementsTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/PostResponses", ReplyAction="http://tempuri.org/IMobileTim/PostResponsesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/PostResponsesFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task PostResponsesAsync(string mobileId, string version, System.Collections.Generic.List<mTIM.UWP.mtimservice.TaskResult> results);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/PostResponsesAsCsv", ReplyAction="http://tempuri.org/IMobileTim/PostResponsesAsCsvResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/PostResponsesAsCsvFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task PostResponsesAsCsvAsync(string mobileId, string version, string results);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/PostResponsesAsCsvGZipped", ReplyAction="http://tempuri.org/IMobileTim/PostResponsesAsCsvGZippedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/PostResponsesAsCsvGZippedFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task PostResponsesAsCsvGZippedAsync(string mobileId, string version, byte[] results);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetServerTime", ReplyAction="http://tempuri.org/IMobileTim/GetServerTimeResponse")]
        System.Threading.Tasks.Task<string> GetServerTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/QueryAppUpdate", ReplyAction="http://tempuri.org/IMobileTim/QueryAppUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/QueryAppUpdateFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<mTIM.UWP.mtimservice.VersionUpdateInformation> QueryAppUpdateAsync(string mobileId, string currentVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/UploadFile", ReplyAction="http://tempuri.org/IMobileTim/UploadFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/UploadFileFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<int> UploadFileAsync(string mobileId, string version, int taskListId, int posId, byte[] fileContent, string fileExtension, string gps, string comment, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/ChangeFileComment", ReplyAction="http://tempuri.org/IMobileTim/ChangeFileCommentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/ChangeFileCommentFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<bool> ChangeFileCommentAsync(string mobileId, string version, int fileID, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/DeleteFile", ReplyAction="http://tempuri.org/IMobileTim/DeleteFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/DeleteFileFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task DeleteFileAsync(string mobileId, string version, int fileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetFileIDs", ReplyAction="http://tempuri.org/IMobileTim/GetFileIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetFileIDsFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>>> GetFileIDsAsync(string mobileId, string version, int taskListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetFilesInformation", ReplyAction="http://tempuri.org/IMobileTim/GetFilesInformationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetFilesInformationFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<mTIM.UWP.mtimservice.FileInformation>>> GetFilesInformationAsync(string mobileId, string version, int taskListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMobileTim/GetFile", ReplyAction="http://tempuri.org/IMobileTim/GetFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(mTIM.UWP.mtimservice.FaultDetails), Action="http://tempuri.org/IMobileTim/GetFileFaultDetailsFault", Name="FaultDetails", Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
        System.Threading.Tasks.Task<mTIM.UWP.mtimservice.TupleOfstringbase64Binary> GetFileAsync(string mobileId, string version, int fileID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMobileTimChannel : mTIM.UWP.mtimservice.IMobileTim, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MobileTimClient : System.ServiceModel.ClientBase<mTIM.UWP.mtimservice.IMobileTim>, mTIM.UWP.mtimservice.IMobileTim {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MobileTimClient() : 
                base(MobileTimClient.GetDefaultBinding(), MobileTimClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMobileTim.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MobileTimClient(EndpointConfiguration endpointConfiguration) : 
                base(MobileTimClient.GetBindingForEndpoint(endpointConfiguration), MobileTimClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MobileTimClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MobileTimClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MobileTimClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MobileTimClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MobileTimClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<int> GetTaskListIdForDayAsync(string mobileId, string version, int year, int month, int day) {
            return base.Channel.GetTaskListIdForDayAsync(mobileId, version, year, month, day);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<mTIM.UWP.mtimservice.TimTask>> GetTaskListAsync(string mobileId, string version, int taskListId) {
            return base.Channel.GetTaskListAsync(mobileId, version, taskListId);
        }
        
        public System.Threading.Tasks.Task<string> GetTaskListAsCsvAsync(string mobileId, string version, int taskListId) {
            return base.Channel.GetTaskListAsCsvAsync(mobileId, version, taskListId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetTaskListAsCsvGZippedAsync(string mobileId, string version, int taskListId) {
            return base.Channel.GetTaskListAsCsvGZippedAsync(mobileId, version, taskListId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetGraphicsBlobProtobufGZippedAsync(string mobileId, string version, int taskListId) {
            return base.Channel.GetGraphicsBlobProtobufGZippedAsync(mobileId, version, taskListId);
        }
        
        public System.Threading.Tasks.Task<mTIM.UWP.mtimservice.StateInformation> GetStatusAsync(string mobileId, string version, int taskListId, System.Guid configurationTimestamp, System.Guid elementsTimestamp) {
            return base.Channel.GetStatusAsync(mobileId, version, taskListId, configurationTimestamp, elementsTimestamp);
        }
        
        public System.Threading.Tasks.Task PostResponsesAsync(string mobileId, string version, System.Collections.Generic.List<mTIM.UWP.mtimservice.TaskResult> results) {
            return base.Channel.PostResponsesAsync(mobileId, version, results);
        }
        
        public System.Threading.Tasks.Task PostResponsesAsCsvAsync(string mobileId, string version, string results) {
            return base.Channel.PostResponsesAsCsvAsync(mobileId, version, results);
        }
        
        public System.Threading.Tasks.Task PostResponsesAsCsvGZippedAsync(string mobileId, string version, byte[] results) {
            return base.Channel.PostResponsesAsCsvGZippedAsync(mobileId, version, results);
        }
        
        public System.Threading.Tasks.Task<string> GetServerTimeAsync() {
            return base.Channel.GetServerTimeAsync();
        }
        
        public System.Threading.Tasks.Task<mTIM.UWP.mtimservice.VersionUpdateInformation> QueryAppUpdateAsync(string mobileId, string currentVersion) {
            return base.Channel.QueryAppUpdateAsync(mobileId, currentVersion);
        }
        
        public System.Threading.Tasks.Task<int> UploadFileAsync(string mobileId, string version, int taskListId, int posId, byte[] fileContent, string fileExtension, string gps, string comment, System.DateTime time) {
            return base.Channel.UploadFileAsync(mobileId, version, taskListId, posId, fileContent, fileExtension, gps, comment, time);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeFileCommentAsync(string mobileId, string version, int fileID, string comment) {
            return base.Channel.ChangeFileCommentAsync(mobileId, version, fileID, comment);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(string mobileId, string version, int fileID) {
            return base.Channel.DeleteFileAsync(mobileId, version, fileID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>>> GetFileIDsAsync(string mobileId, string version, int taskListId) {
            return base.Channel.GetFileIDsAsync(mobileId, version, taskListId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<mTIM.UWP.mtimservice.FileInformation>>> GetFilesInformationAsync(string mobileId, string version, int taskListId) {
            return base.Channel.GetFilesInformationAsync(mobileId, version, taskListId);
        }
        
        public System.Threading.Tasks.Task<mTIM.UWP.mtimservice.TupleOfstringbase64Binary> GetFileAsync(string mobileId, string version, int fileID) {
            return base.Channel.GetFileAsync(mobileId, version, fileID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMobileTim)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMobileTim)) {
                return new System.ServiceModel.EndpointAddress("http://mtimtest.precast-software.com:7778/External/v1.2/External.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MobileTimClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMobileTim);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MobileTimClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMobileTim);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMobileTim,
        }
    }
}
