//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mTIM.Droid.mtimtest.precast_software.com {
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IMobileTim", Namespace="http://tempuri.org/")]
    public partial class MobileTimService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTaskListIdForDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskListAsCsvOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskListAsCsvGZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGraphicsBlobProtobufGZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostResponsesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostResponsesAsCsvOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostResponsesAsCsvGZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryAppUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeFileCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        /// <remarks/>
        public MobileTimService() {
            this.Url = "http://mtimtest.precast-software.com:7778/External/v1.2/External.svc";
        }
        
        public MobileTimService(string url) {
            this.Url = url;
        }
        
        /// <remarks/>
        public event GetTaskListIdForDayCompletedEventHandler GetTaskListIdForDayCompleted;
        
        /// <remarks/>
        public event GetTaskListCompletedEventHandler GetTaskListCompleted;
        
        /// <remarks/>
        public event GetTaskListAsCsvCompletedEventHandler GetTaskListAsCsvCompleted;
        
        /// <remarks/>
        public event GetTaskListAsCsvGZippedCompletedEventHandler GetTaskListAsCsvGZippedCompleted;
        
        /// <remarks/>
        public event GetGraphicsBlobProtobufGZippedCompletedEventHandler GetGraphicsBlobProtobufGZippedCompleted;
        
        /// <remarks/>
        public event GetStatusCompletedEventHandler GetStatusCompleted;
        
        /// <remarks/>
        public event PostResponsesCompletedEventHandler PostResponsesCompleted;
        
        /// <remarks/>
        public event PostResponsesAsCsvCompletedEventHandler PostResponsesAsCsvCompleted;
        
        /// <remarks/>
        public event PostResponsesAsCsvGZippedCompletedEventHandler PostResponsesAsCsvGZippedCompleted;
        
        /// <remarks/>
        public event GetServerTimeCompletedEventHandler GetServerTimeCompleted;
        
        /// <remarks/>
        public event QueryAppUpdateCompletedEventHandler QueryAppUpdateCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event ChangeFileCommentCompletedEventHandler ChangeFileCommentCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event GetFileIDsCompletedEventHandler GetFileIDsCompleted;
        
        /// <remarks/>
        public event GetFilesInformationCompletedEventHandler GetFilesInformationCompleted;
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetTaskListIdForDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetTaskListIdForDay([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int year, [System.Xml.Serialization.XmlIgnoreAttribute()] bool yearSpecified, int month, [System.Xml.Serialization.XmlIgnoreAttribute()] bool monthSpecified, int day, [System.Xml.Serialization.XmlIgnoreAttribute()] bool daySpecified, out int GetTaskListIdForDayResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetTaskListIdForDayResultSpecified) {
            object[] results = this.Invoke("GetTaskListIdForDay", new object[] {
                        mobileId,
                        version,
                        year,
                        yearSpecified,
                        month,
                        monthSpecified,
                        day,
                        daySpecified});
            GetTaskListIdForDayResult = ((int)(results[0]));
            GetTaskListIdForDayResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void GetTaskListIdForDayAsync(string mobileId, string version, int year, bool yearSpecified, int month, bool monthSpecified, int day, bool daySpecified) {
            this.GetTaskListIdForDayAsync(mobileId, version, year, yearSpecified, month, monthSpecified, day, daySpecified, null);
        }
        
        /// <remarks/>
        public void GetTaskListIdForDayAsync(string mobileId, string version, int year, bool yearSpecified, int month, bool monthSpecified, int day, bool daySpecified, object userState) {
            if ((this.GetTaskListIdForDayOperationCompleted == null)) {
                this.GetTaskListIdForDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskListIdForDayOperationCompleted);
            }
            this.InvokeAsync("GetTaskListIdForDay", new object[] {
                        mobileId,
                        version,
                        year,
                        yearSpecified,
                        month,
                        monthSpecified,
                        day,
                        daySpecified}, this.GetTaskListIdForDayOperationCompleted, userState);
        }
        
        private void OnGetTaskListIdForDayOperationCompleted(object arg) {
            if ((this.GetTaskListIdForDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskListIdForDayCompleted(this, new GetTaskListIdForDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetTaskList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v1_2.External")]
        public TimTask[] GetTaskList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified) {
            object[] results = this.Invoke("GetTaskList", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified});
            return ((TimTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskListAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified) {
            this.GetTaskListAsync(mobileId, version, taskListId, taskListIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetTaskListAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, object userState) {
            if ((this.GetTaskListOperationCompleted == null)) {
                this.GetTaskListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskListOperationCompleted);
            }
            this.InvokeAsync("GetTaskList", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified}, this.GetTaskListOperationCompleted, userState);
        }
        
        private void OnGetTaskListOperationCompleted(object arg) {
            if ((this.GetTaskListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskListCompleted(this, new GetTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetTaskListAsCsv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetTaskListAsCsv([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified) {
            object[] results = this.Invoke("GetTaskListAsCsv", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskListAsCsvAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified) {
            this.GetTaskListAsCsvAsync(mobileId, version, taskListId, taskListIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetTaskListAsCsvAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, object userState) {
            if ((this.GetTaskListAsCsvOperationCompleted == null)) {
                this.GetTaskListAsCsvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskListAsCsvOperationCompleted);
            }
            this.InvokeAsync("GetTaskListAsCsv", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified}, this.GetTaskListAsCsvOperationCompleted, userState);
        }
        
        private void OnGetTaskListAsCsvOperationCompleted(object arg) {
            if ((this.GetTaskListAsCsvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskListAsCsvCompleted(this, new GetTaskListAsCsvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetTaskListAsCsvGZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] GetTaskListAsCsvGZipped([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified) {
            object[] results = this.Invoke("GetTaskListAsCsvGZipped", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskListAsCsvGZippedAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified) {
            this.GetTaskListAsCsvGZippedAsync(mobileId, version, taskListId, taskListIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetTaskListAsCsvGZippedAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, object userState) {
            if ((this.GetTaskListAsCsvGZippedOperationCompleted == null)) {
                this.GetTaskListAsCsvGZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskListAsCsvGZippedOperationCompleted);
            }
            this.InvokeAsync("GetTaskListAsCsvGZipped", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified}, this.GetTaskListAsCsvGZippedOperationCompleted, userState);
        }
        
        private void OnGetTaskListAsCsvGZippedOperationCompleted(object arg) {
            if ((this.GetTaskListAsCsvGZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskListAsCsvGZippedCompleted(this, new GetTaskListAsCsvGZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetGraphicsBlobProtobufGZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] GetGraphicsBlobProtobufGZipped([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified) {
            object[] results = this.Invoke("GetGraphicsBlobProtobufGZipped", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGraphicsBlobProtobufGZippedAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified) {
            this.GetGraphicsBlobProtobufGZippedAsync(mobileId, version, taskListId, taskListIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetGraphicsBlobProtobufGZippedAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, object userState) {
            if ((this.GetGraphicsBlobProtobufGZippedOperationCompleted == null)) {
                this.GetGraphicsBlobProtobufGZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGraphicsBlobProtobufGZippedOperationCompleted);
            }
            this.InvokeAsync("GetGraphicsBlobProtobufGZipped", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified}, this.GetGraphicsBlobProtobufGZippedOperationCompleted, userState);
        }
        
        private void OnGetGraphicsBlobProtobufGZippedOperationCompleted(object arg) {
            if ((this.GetGraphicsBlobProtobufGZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGraphicsBlobProtobufGZippedCompleted(this, new GetGraphicsBlobProtobufGZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public StateInformation GetStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified, string configurationTimestamp, string elementsTimestamp) {
            object[] results = this.Invoke("GetStatus", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified,
                        configurationTimestamp,
                        elementsTimestamp});
            return ((StateInformation)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, string configurationTimestamp, string elementsTimestamp) {
            this.GetStatusAsync(mobileId, version, taskListId, taskListIdSpecified, configurationTimestamp, elementsTimestamp, null);
        }
        
        /// <remarks/>
        public void GetStatusAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, string configurationTimestamp, string elementsTimestamp, object userState) {
            if ((this.GetStatusOperationCompleted == null)) {
                this.GetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOperationCompleted);
            }
            this.InvokeAsync("GetStatus", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified,
                        configurationTimestamp,
                        elementsTimestamp}, this.GetStatusOperationCompleted, userState);
        }
        
        private void OnGetStatusOperationCompleted(object arg) {
            if ((this.GetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/PostResponses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PostResponses([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")] TaskResult[] results) {
            this.Invoke("PostResponses", new object[] {
                        mobileId,
                        version,
                        results});
        }
        
        /// <remarks/>
        public void PostResponsesAsync(string mobileId, string version, TaskResult[] results) {
            this.PostResponsesAsync(mobileId, version, results, null);
        }
        
        /// <remarks/>
        public void PostResponsesAsync(string mobileId, string version, TaskResult[] results, object userState) {
            if ((this.PostResponsesOperationCompleted == null)) {
                this.PostResponsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostResponsesOperationCompleted);
            }
            this.InvokeAsync("PostResponses", new object[] {
                        mobileId,
                        version,
                        results}, this.PostResponsesOperationCompleted, userState);
        }
        
        private void OnPostResponsesOperationCompleted(object arg) {
            if ((this.PostResponsesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostResponsesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/PostResponsesAsCsv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PostResponsesAsCsv([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string results) {
            this.Invoke("PostResponsesAsCsv", new object[] {
                        mobileId,
                        version,
                        results});
        }
        
        /// <remarks/>
        public void PostResponsesAsCsvAsync(string mobileId, string version, string results) {
            this.PostResponsesAsCsvAsync(mobileId, version, results, null);
        }
        
        /// <remarks/>
        public void PostResponsesAsCsvAsync(string mobileId, string version, string results, object userState) {
            if ((this.PostResponsesAsCsvOperationCompleted == null)) {
                this.PostResponsesAsCsvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostResponsesAsCsvOperationCompleted);
            }
            this.InvokeAsync("PostResponsesAsCsv", new object[] {
                        mobileId,
                        version,
                        results}, this.PostResponsesAsCsvOperationCompleted, userState);
        }
        
        private void OnPostResponsesAsCsvOperationCompleted(object arg) {
            if ((this.PostResponsesAsCsvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostResponsesAsCsvCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/PostResponsesAsCsvGZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PostResponsesAsCsvGZipped([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] results) {
            this.Invoke("PostResponsesAsCsvGZipped", new object[] {
                        mobileId,
                        version,
                        results});
        }
        
        /// <remarks/>
        public void PostResponsesAsCsvGZippedAsync(string mobileId, string version, byte[] results) {
            this.PostResponsesAsCsvGZippedAsync(mobileId, version, results, null);
        }
        
        /// <remarks/>
        public void PostResponsesAsCsvGZippedAsync(string mobileId, string version, byte[] results, object userState) {
            if ((this.PostResponsesAsCsvGZippedOperationCompleted == null)) {
                this.PostResponsesAsCsvGZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostResponsesAsCsvGZippedOperationCompleted);
            }
            this.InvokeAsync("PostResponsesAsCsvGZipped", new object[] {
                        mobileId,
                        version,
                        results}, this.PostResponsesAsCsvGZippedOperationCompleted, userState);
        }
        
        private void OnPostResponsesAsCsvGZippedOperationCompleted(object arg) {
            if ((this.PostResponsesAsCsvGZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostResponsesAsCsvGZippedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetServerTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetServerTime() {
            object[] results = this.Invoke("GetServerTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerTimeAsync() {
            this.GetServerTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetServerTimeAsync(object userState) {
            if ((this.GetServerTimeOperationCompleted == null)) {
                this.GetServerTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerTimeOperationCompleted);
            }
            this.InvokeAsync("GetServerTime", new object[0], this.GetServerTimeOperationCompleted, userState);
        }
        
        private void OnGetServerTimeOperationCompleted(object arg) {
            if ((this.GetServerTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerTimeCompleted(this, new GetServerTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/QueryAppUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public VersionUpdateInformation QueryAppUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string currentVersion) {
            object[] results = this.Invoke("QueryAppUpdate", new object[] {
                        mobileId,
                        currentVersion});
            return ((VersionUpdateInformation)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAppUpdateAsync(string mobileId, string currentVersion) {
            this.QueryAppUpdateAsync(mobileId, currentVersion, null);
        }
        
        /// <remarks/>
        public void QueryAppUpdateAsync(string mobileId, string currentVersion, object userState) {
            if ((this.QueryAppUpdateOperationCompleted == null)) {
                this.QueryAppUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAppUpdateOperationCompleted);
            }
            this.InvokeAsync("QueryAppUpdate", new object[] {
                        mobileId,
                        currentVersion}, this.QueryAppUpdateOperationCompleted, userState);
        }
        
        private void OnQueryAppUpdateOperationCompleted(object arg) {
            if ((this.QueryAppUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAppUpdateCompleted(this, new QueryAppUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/UploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified, int posId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool posIdSpecified, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] fileContent, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileExtension, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gps, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string comment, System.DateTime time, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeSpecified, out int UploadFileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool UploadFileResultSpecified) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified,
                        posId,
                        posIdSpecified,
                        fileContent,
                        fileExtension,
                        gps,
                        comment,
                        time,
                        timeSpecified});
            UploadFileResult = ((int)(results[0]));
            UploadFileResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, int posId, bool posIdSpecified, byte[] fileContent, string fileExtension, string gps, string comment, System.DateTime time, bool timeSpecified) {
            this.UploadFileAsync(mobileId, version, taskListId, taskListIdSpecified, posId, posIdSpecified, fileContent, fileExtension, gps, comment, time, timeSpecified, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, int posId, bool posIdSpecified, byte[] fileContent, string fileExtension, string gps, string comment, System.DateTime time, bool timeSpecified, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified,
                        posId,
                        posIdSpecified,
                        fileContent,
                        fileExtension,
                        gps,
                        comment,
                        time,
                        timeSpecified}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/ChangeFileComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeFileComment([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int fileID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string comment, out bool ChangeFileCommentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ChangeFileCommentResultSpecified) {
            object[] results = this.Invoke("ChangeFileComment", new object[] {
                        mobileId,
                        version,
                        fileID,
                        fileIDSpecified,
                        comment});
            ChangeFileCommentResult = ((bool)(results[0]));
            ChangeFileCommentResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ChangeFileCommentAsync(string mobileId, string version, int fileID, bool fileIDSpecified, string comment) {
            this.ChangeFileCommentAsync(mobileId, version, fileID, fileIDSpecified, comment, null);
        }
        
        /// <remarks/>
        public void ChangeFileCommentAsync(string mobileId, string version, int fileID, bool fileIDSpecified, string comment, object userState) {
            if ((this.ChangeFileCommentOperationCompleted == null)) {
                this.ChangeFileCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeFileCommentOperationCompleted);
            }
            this.InvokeAsync("ChangeFileComment", new object[] {
                        mobileId,
                        version,
                        fileID,
                        fileIDSpecified,
                        comment}, this.ChangeFileCommentOperationCompleted, userState);
        }
        
        private void OnChangeFileCommentOperationCompleted(object arg) {
            if ((this.ChangeFileCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeFileCommentCompleted(this, new ChangeFileCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/DeleteFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int fileID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileIDSpecified) {
            this.Invoke("DeleteFile", new object[] {
                        mobileId,
                        version,
                        fileID,
                        fileIDSpecified});
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string mobileId, string version, int fileID, bool fileIDSpecified) {
            this.DeleteFileAsync(mobileId, version, fileID, fileIDSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string mobileId, string version, int fileID, bool fileIDSpecified, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        mobileId,
                        version,
                        fileID,
                        fileIDSpecified}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetFileIDs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfintArrayOfintty7Ep6D1", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public ArrayOfKeyValueOfintArrayOfintty7Ep6D1KeyValueOfintArrayOfintty7Ep6D1[] GetFileIDs([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified) {
            object[] results = this.Invoke("GetFileIDs", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified});
            return ((ArrayOfKeyValueOfintArrayOfintty7Ep6D1KeyValueOfintArrayOfintty7Ep6D1[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileIDsAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified) {
            this.GetFileIDsAsync(mobileId, version, taskListId, taskListIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetFileIDsAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, object userState) {
            if ((this.GetFileIDsOperationCompleted == null)) {
                this.GetFileIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileIDsOperationCompleted);
            }
            this.InvokeAsync("GetFileIDs", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified}, this.GetFileIDsOperationCompleted, userState);
        }
        
        private void OnGetFileIDsOperationCompleted(object arg) {
            if ((this.GetFileIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileIDsCompleted(this, new GetFileIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetFilesInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfintArrayOfFileInformationaUFBlTcN", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public ArrayOfKeyValueOfintArrayOfFileInformationaUFBlTcNKeyValueOfintArrayOfFileInformationaUFBlTcN[] GetFilesInformation([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int taskListId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskListIdSpecified) {
            object[] results = this.Invoke("GetFilesInformation", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified});
            return ((ArrayOfKeyValueOfintArrayOfFileInformationaUFBlTcNKeyValueOfintArrayOfFileInformationaUFBlTcN[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesInformationAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified) {
            this.GetFilesInformationAsync(mobileId, version, taskListId, taskListIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetFilesInformationAsync(string mobileId, string version, int taskListId, bool taskListIdSpecified, object userState) {
            if ((this.GetFilesInformationOperationCompleted == null)) {
                this.GetFilesInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesInformationOperationCompleted);
            }
            this.InvokeAsync("GetFilesInformation", new object[] {
                        mobileId,
                        version,
                        taskListId,
                        taskListIdSpecified}, this.GetFilesInformationOperationCompleted, userState);
        }
        
        private void OnGetFilesInformationOperationCompleted(object arg) {
            if ((this.GetFilesInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesInformationCompleted(this, new GetFilesInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobileTim/GetFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public TupleOfstringbase64Binary GetFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mobileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string version, int fileID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileIDSpecified) {
            object[] results = this.Invoke("GetFile", new object[] {
                        mobileId,
                        version,
                        fileID,
                        fileIDSpecified});
            return ((TupleOfstringbase64Binary)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileAsync(string mobileId, string version, int fileID, bool fileIDSpecified) {
            this.GetFileAsync(mobileId, version, fileID, fileIDSpecified, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string mobileId, string version, int fileID, bool fileIDSpecified, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        mobileId,
                        version,
                        fileID,
                        fileIDSpecified}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v1_2.External")]
    public partial class TimTask {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Action;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Color;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EvaluationType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ExternId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ForSubLevel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForSubLevelSpecified;
        
        /// <remarks/>
        public bool HasGPS;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasGPSSpecified;
        
        /// <remarks/>
        public int Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified;
        
        /// <remarks/>
        public int Level;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LevelSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name;
        
        /// <remarks/>
        public string ObjectId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Parent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Path;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Range;
        
        /// <remarks/>
        public bool ShowInList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowInListSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SortNr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SortNrSpecified;
        
        /// <remarks/>
        public bool SplitGraphic;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SplitGraphicSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class TupleOfstringbase64Binary {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string m_Item1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] m_Item2;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.ServiceContracts.v1_1.External")]
    public partial class FileInformation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Comment;
        
        /// <remarks/>
        public int FileID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FileIDSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
    public partial class VersionUpdateInformation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Url;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Version;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.DataContracts.v0_6.External")]
    public partial class TaskResult {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Gps;
        
        /// <remarks/>
        public int PosId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PosIdSpecified;
        
        /// <remarks/>
        public int TaskId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TaskIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Time;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class ElementState {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] Conditions;
        
        /// <remarks/>
        public string ObjectID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class CurrentElementsState {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ElementState[] Elements;
        
        /// <remarks/>
        public string Timestamp;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class Status {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Color;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] Conditions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name;
        
        /// <remarks/>
        public int Sequence;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SequenceSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StatusCondition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StatusAction {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] NegativePreconditions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] PositivePreconditions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] ResetConditions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] SetConditions;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StatusConfiguration {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public StatusAction[] Actions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public StatusCondition[] Conditions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public Status[] States;
        
        /// <remarks/>
        public string Timestamp;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.Contracts.DataContracts.v1_0")]
    public partial class StateInformation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public StatusConfiguration Configuration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CurrentElementsState State;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
    public partial class ArrayOfKeyValueOfintArrayOfintty7Ep6D1KeyValueOfintArrayOfintty7Ep6D1 {
        
        /// <remarks/>
        public int Key;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public int[] Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
    public partial class ArrayOfKeyValueOfintArrayOfFileInformationaUFBlTcNKeyValueOfintArrayOfFileInformationaUFBlTcN {
        
        /// <remarks/>
        public int Key;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/mTim.ServiceContracts.v1_1.External", IsNullable=false)]
        public FileInformation[] Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetTaskListIdForDayCompletedEventHandler(object sender, GetTaskListIdForDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskListIdForDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskListIdForDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int GetTaskListIdForDayResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetTaskListIdForDayResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetTaskListCompletedEventHandler(object sender, GetTaskListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetTaskListAsCsvCompletedEventHandler(object sender, GetTaskListAsCsvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskListAsCsvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskListAsCsvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetTaskListAsCsvGZippedCompletedEventHandler(object sender, GetTaskListAsCsvGZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskListAsCsvGZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskListAsCsvGZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetGraphicsBlobProtobufGZippedCompletedEventHandler(object sender, GetGraphicsBlobProtobufGZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGraphicsBlobProtobufGZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGraphicsBlobProtobufGZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetStatusCompletedEventHandler(object sender, GetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StateInformation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StateInformation)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void PostResponsesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void PostResponsesAsCsvCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void PostResponsesAsCsvGZippedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetServerTimeCompletedEventHandler(object sender, GetServerTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void QueryAppUpdateCompletedEventHandler(object sender, QueryAppUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAppUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryAppUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VersionUpdateInformation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VersionUpdateInformation)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int UploadFileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool UploadFileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void ChangeFileCommentCompletedEventHandler(object sender, ChangeFileCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeFileCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeFileCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ChangeFileCommentResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ChangeFileCommentResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void DeleteFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetFileIDsCompletedEventHandler(object sender, GetFileIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ArrayOfKeyValueOfintArrayOfintty7Ep6D1KeyValueOfintArrayOfintty7Ep6D1[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfKeyValueOfintArrayOfintty7Ep6D1KeyValueOfintArrayOfintty7Ep6D1[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetFilesInformationCompletedEventHandler(object sender, GetFilesInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ArrayOfKeyValueOfintArrayOfFileInformationaUFBlTcNKeyValueOfintArrayOfFileInformationaUFBlTcN[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfKeyValueOfintArrayOfFileInformationaUFBlTcNKeyValueOfintArrayOfFileInformationaUFBlTcN[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("VisualStudio", "8.10.6.10")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TupleOfstringbase64Binary Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TupleOfstringbase64Binary)(this.results[0]));
            }
        }
    }
}
